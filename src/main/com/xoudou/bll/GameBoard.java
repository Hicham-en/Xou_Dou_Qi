package com.xoudou.bll;

import com.xoudou.bo.Piece;

/**
 * Plateau de jeu Xou Dou Qi avec toutes les r√®gles impl√©ment√©es
 * Plateau 9x7 avec rivi√®re, pi√®ges et sanctuaires
 */
public class GameBoard {
    private static final int ROWS = 9;
    private static final int COLS = 7;
    private Piece[][] board;
    private boolean gameOver;
    private String gameResult;

    // Positions sp√©ciales du plateau
    private static final int[][] RIVER_POSITIONS = {
            { 3, 1 }, { 3, 2 }, { 4, 1 }, { 4, 2 }, { 5, 1 }, { 5, 2 }, // Rivi√®re gauche
            { 3, 4 }, { 3, 5 }, { 4, 4 }, { 4, 5 }, { 5, 4 }, { 5, 5 } // Rivi√®re droite
    };

    private static final int[][] TRAP_POSITIONS = {
            { 0, 2 }, { 0, 4 }, { 1, 3 }, // Pi√®ges joueur 2 (haut)
            { 8, 2 }, { 8, 4 }, { 7, 3 } // Pi√®ges joueur 1 (bas)
    };

    private static final int[] SANCTUARY_PLAYER1 = { 8, 3 }; // Sanctuaire joueur 1 (bas)
    private static final int[] SANCTUARY_PLAYER2 = { 0, 3 }; // Sanctuaire joueur 2 (haut)

    public GameBoard() {
        board = new Piece[ROWS][COLS];
        gameOver = false;
        gameResult = "";
    }

    /**
     * Initialise le plateau avec les pi√®ces dans leurs positions de d√©part
     */
    public void initializeBoard() {
        // Nettoyer le plateau
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                board[i][j] = null;
            }
        }

        // Placer les pi√®ces du Joueur 2 (haut du plateau)
        board[2][6] = new Piece(1, false); // √âl√©phant
        board[0][0] = new Piece(2, false); // Lion
        board[0][6] = new Piece(3, false); // Tigre
        board[2][2] = new Piece(4, false); // Panth√®re
        board[1][1] = new Piece(5, false); // Chien
        board[2][4] = new Piece(6, false); // Loup
        board[1][5] = new Piece(7, false); // Chat
        board[2][0] = new Piece(8, false); // Rat

        // Placer les pi√®ces du Joueur 1 (bas du plateau) - positions miroir
        board[6][0] = new Piece(1, true); // √âl√©phant
        board[8][6] = new Piece(2, true); // Lion
        board[8][0] = new Piece(3, true); // Tigre
        board[6][4] = new Piece(4, true); // Panth√®re
        board[7][5] = new Piece(5, true); // Chien
        board[6][2] = new Piece(6, true); // Loup
        board[7][1] = new Piece(7, true); // Chat
        board[6][6] = new Piece(8, true); // Rat

        gameOver = false;
        gameResult = "";
    }

    /**
     * Affiche le plateau de jeu avec des traits d√©coratifs
     */
    public void displayBoard() {
        System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                   üéØ PLATEAU XOU DOU QI üéØ                    ‚ïë");
        System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");

        // En-t√™te avec num√©ros de colonnes
        System.out.print("‚ïë     ");
        for (int j = 0; j < COLS; j++) {
            System.out.printf("   %d    ", j);
        }
        System.out.println("  ‚ïë");

        System.out.println("‚ïë   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó ‚ïë");

        for (int i = 0; i < ROWS; i++) {
            // Ligne avec num√©ro de rang√©e
            System.out.printf("‚ïë %d ‚ïë  ", i);

            for (int j = 0; j < COLS; j++) {
                String cellContent = getCellDisplay(i, j);
                System.out.print(" " + cellContent + " ");

                // S√©parateur vertical
                if (j < COLS - 1) {
                    System.out.print("‚îÇ");
                }
            }
            System.out.println("‚ïë ‚ïë");

            // Ligne horizontale entre les rang√©es (sauf derni√®re)
            if (i < ROWS - 1) {
                System.out.print("‚ïë   ‚ïë‚îÄ‚îÄ");
                for (int j = 0; j < COLS; j++) {
                    if (isRiver(i, j) || isRiver(i + 1, j)) {
                        System.out.print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
                    } else {
                        System.out.print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
                    }
                    if (j < COLS - 1) {
                        System.out.print("‚îº");
                    }
                }
                System.out.println("‚ïë ‚ïë");
            }
        }

        System.out.println("‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïë");
        System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
        System.out.println("‚ïë    üîπJ1: emojis normaux     ‚îÇ üî∏ J2: emojis avec '            ‚ïë");
        System.out.println("‚ïë        üåä =Rivi√®re  ‚îÇ  üí• T=Pi√®ge  ‚îÇ  üèõÔ∏è S=Sanctuaire         ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
    }

    /**
     * Obtient l'affichage d'une cellule
     */
    private String getCellDisplay(int row, int col) {
        if (board[row][col] != null) {
            Piece piece = board[row][col];

            String symbol = switch (piece.getType()) {
                case 1 -> "üêò";
                case 2 -> "ü¶Å";
                case 3 -> "üêØ";
                case 4 -> "üêÜ";
                case 5 -> "üê∂";
                case 6 -> "üê∫";
                case 7 -> "üê±";
                case 8 -> "üê≠"; 
                default -> "?";
            };
            
            if (!piece.isPlayer1()) {
                symbol += "'";
            }
            return String.format(" %3s ", symbol);
        } else {
            // Afficher le terrain sp√©cial
            if (isRiver(row, col)) {
                return " üåä  ";
            } else if (isTrap(row, col)) {
                return " üí•  ";
            } else if (isSanctuaire(row, col)) {
                return " üèõÔ∏è  ";
            } else {
                return " ..  ";
            }
        }
    }

    /**
     * V√©rifie si une position est valide sur le plateau
     */
    public boolean isValidPosition(int row, int col) {
        return row >= 0 && row < ROWS && col >= 0 && col < COLS;
    }

    /**
     * V√©rifie si une position est dans la rivi√®re
     */
    public boolean isRiver(int row, int col) {
        for (int[] pos : RIVER_POSITIONS) {
            if (pos[0] == row && pos[1] == col) {
                return true;
            }
        }
        return false;
    }

    /**
     * V√©rifie si une position est un pi√®ge
     */
    public boolean isTrap(int row, int col) {
        for (int[] pos : TRAP_POSITIONS) {
            if (pos[0] == row && pos[1] == col) {
                return true;
            }
        }
        return false;
    }

    /**
     * V√©rifie si une position est un sanctuaire
     */
    public boolean isSanctuaire(int row, int col) {
        return (row == SANCTUARY_PLAYER1[0] && col == SANCTUARY_PLAYER1[1]) ||
                (row == SANCTUARY_PLAYER2[0] && col == SANCTUARY_PLAYER2[1]);
    }

    /**
     * Effectue un mouvement sur le plateau
     */
    public boolean makeMove(int fromRow, int fromCol, int toRow, int toCol, boolean isPlayer1) {
        // Validation de base
        if (!isValidPosition(fromRow, fromCol) || !isValidPosition(toRow, toCol)) {
            System.out.println("‚ùå Position invalide!");
            return false;
        }

        Piece piece = board[fromRow][fromCol];
        if (piece == null) {
            System.out.println("‚ùå Aucune pi√®ce √† cette position!");
            return false;
        }

        if (piece.isPlayer1() != isPlayer1) {
            System.out.println("‚ùå Cette pi√®ce ne vous appartient pas!");
            return false;
        }

        // Ne peut pas entrer dans son propre sanctuaire
        if (isSanctuaire(toRow, toCol)) {
            boolean isOwnSanctuary = (isPlayer1 && toRow == SANCTUARY_PLAYER1[0] && toCol == SANCTUARY_PLAYER1[1]) ||
                    (!isPlayer1 && toRow == SANCTUARY_PLAYER2[0] && toCol == SANCTUARY_PLAYER2[1]);
            if (isOwnSanctuary) {
                System.out.println("‚ùå Vous ne pouvez pas entrer dans votre propre sanctuaire!");
                return false;
            }
        }

        // V√©rifier si le mouvement est valide selon les r√®gles
        if (!isValidMove(piece, fromRow, fromCol, toRow, toCol)) {
            return false;
        }

        // V√©rifier la capture
        Piece targetPiece = board[toRow][toCol];
        if (targetPiece != null) {
            if (targetPiece.isPlayer1() == piece.isPlayer1()) {
                System.out.println("‚ùå Vous ne pouvez pas capturer vos propres pi√®ces!");
                return false;
            }

            // V√©rifier si la capture est possible selon les r√®gles de hi√©rarchie
            if (!canCapture(piece, targetPiece, fromRow, fromCol, toRow, toCol)) {
                return false;
            }

            System.out.println("üéØ " + piece.getName() + " capture " + targetPiece.getName() + "!");
        }

        // Effectuer le mouvement
        board[toRow][toCol] = piece;
        board[fromRow][fromCol] = null;

        // V√©rifier les conditions de fin de jeu
        checkGameEnd();

        return true;
    }

    /**
     * V√©rifie si un mouvement est valide selon les r√®gles du jeu
     */
    private boolean isValidMove(Piece piece, int fromRow, int fromCol, int toRow, int toCol) {
        int deltaRow = Math.abs(toRow - fromRow);
        int deltaCol = Math.abs(toCol - fromCol);

        // Mouvement de base: une case horizontalement ou verticalement
        boolean isBasicMove = (deltaRow == 1 && deltaCol == 0) || (deltaRow == 0 && deltaCol == 1);

        // Le Rat ne peut pas capturer en sortant de l'eau
        if (piece.getType() == 8 && isRiver(fromRow, fromCol) && !isRiver(toRow, toCol)) {
            Piece target = board[toRow][toCol];
            if (target != null && target.isPlayer1() != piece.isPlayer1()) {
                System.out.println("‚ùå Le Rat ne peut pas capturer en sortant de la rivi√®re!");
                return false;
            }
        }

        // V√©rifier les mouvements sp√©ciaux
        if (piece.canJumpRiver()) {
            // Lion et Tigre peuvent sauter par-dessus la rivi√®re
            if (isRiverJump(fromRow, fromCol, toRow, toCol)) {
                return isRiverJumpClear(fromRow, fromCol, toRow, toCol);
            }
        }

        // Seul le Rat peut se d√©placer dans l'eau
        if (isRiver(toRow, toCol) && !piece.canSwim()) {
            System.out.println("‚ùå Seul le Rat peut nager dans la rivi√®re!");
            return false;
        }

        if (!isBasicMove) {
            System.out.println("‚ùå Les pi√®ces ne peuvent se d√©placer que d'une case horizontalement ou verticalement!");
            return false;
        }

        return true;
    }

    /**
     * V√©rifie si c'est un saut par-dessus la rivi√®re
     * Lion et Tigre peuvent sauter par-dessus la rivi√®re dans le sens de la largeur
     * et de la longueur
     */
    private boolean isRiverJump(int fromRow, int fromCol, int toRow, int toCol) {
        // Saut horizontal (largeur) - sauter d'un c√¥t√© √† l'autre de la rivi√®re
        if (fromRow == toRow) {
            // Rivi√®re occupe colonnes 1,2 et 4,5 (s√©par√©es par colonne 3)
            // Saut possible de 0->3, 3->0, 3->6, 6->3
            int deltaCol = Math.abs(toCol - fromCol);
            if (deltaCol >= 2) { // Au moins 2 cases pour traverser la rivi√®re
                return crossesRiver(fromRow, fromCol, toRow, toCol, true);
            }
        }

        // Saut vertical (longueur) - sauter du haut vers le bas de la rivi√®re
        if (fromCol == toCol) {
            // Rivi√®re occupe lignes 3,4,5
            // Saut possible de 2->6, 6->2, etc.
            int deltaRow = Math.abs(toRow - fromRow);
            if (deltaRow >= 2) { // Au moins 2 cases pour traverser la rivi√®re
                return crossesRiver(fromRow, fromCol, toRow, toCol, false);
            }
        }

        return false;
    }

    /**
     * V√©rifie si le mouvement traverse bien la rivi√®re
     */
    private boolean crossesRiver(int fromRow, int fromCol, int toRow, int toCol, boolean horizontal) {
        if (horizontal) {
            // V√©rifier qu'on traverse bien les zones de rivi√®re
            int minCol = Math.min(fromCol, toCol);
            int maxCol = Math.max(fromCol, toCol);
            boolean crossesRiverZone = false;

            for (int col = minCol + 1; col < maxCol; col++) {
                if (isRiver(fromRow, col)) {
                    crossesRiverZone = true;
                    break;
                }
            }
            return crossesRiverZone;
        } else {
            // V√©rifier qu'on traverse bien les zones de rivi√®re verticalement
            int minRow = Math.min(fromRow, toRow);
            int maxRow = Math.max(fromRow, toRow);
            boolean crossesRiverZone = false;

            for (int row = minRow + 1; row < maxRow; row++) {
                if (isRiver(row, fromCol)) {
                    crossesRiverZone = true;
                    break;
                }
            }
            return crossesRiverZone;
        }
    }

    /**
     * V√©rifie si le chemin de saut par-dessus la rivi√®re est libre
     * Sp√©cialement v√©rifie s'il y a un rat nageant sur la trajectoire
     */
    private boolean isRiverJumpClear(int fromRow, int fromCol, int toRow, int toCol) {
        if (fromRow == toRow) {
            // Saut horizontal - v√©rifier chaque case sur le chemin
            int minCol = Math.min(fromCol, toCol);
            int maxCol = Math.max(fromCol, toCol);
            for (int col = minCol + 1; col < maxCol; col++) {
                Piece pieceOnPath = board[fromRow][col];
                if (pieceOnPath != null) {
                    // Si c'est un rat dans la rivi√®re, il bloque le saut
                    if (pieceOnPath.getType() == 8 && isRiver(fromRow, col)) {
                        System.out.println("‚ùå Le saut est bloqu√© par un rat nageant!");
                        return false;
                    }
                    // Toute autre pi√®ce bloque aussi le saut
                    if (!isRiver(fromRow, col)) {
                        System.out.println("‚ùå Le chemin de saut est bloqu√©!");
                        return false;
                    }
                }
            }
        } else {
            // Saut vertical - v√©rifier chaque case sur le chemin
            int minRow = Math.min(fromRow, toRow);
            int maxRow = Math.max(fromRow, toRow);
            for (int row = minRow + 1; row < maxRow; row++) {
                Piece pieceOnPath = board[row][fromCol];
                if (pieceOnPath != null) {
                    // Si c'est un rat dans la rivi√®re, il bloque le saut
                    if (pieceOnPath.getType() == 8 && isRiver(row, fromCol)) {
                        System.out.println("‚ùå Le saut est bloqu√© par un rat nageant!");
                        return false;
                    }
                    // Toute autre pi√®ce bloque aussi le saut
                    if (!isRiver(row, fromCol)) {
                        System.out.println("‚ùå Le chemin de saut est bloqu√©!");
                        return false;
                    }
                }
            }
        }
        return true;
    }

    /**
     * V√©rifie si une pi√®ce peut en capturer une autre
     */
    private boolean canCapture(Piece attacker, Piece defender, int fromRow, int fromCol, int toRow, int toCol) {
        // Dans un pi√®ge, les pi√®ces ennemies sont vuln√©rables √† toutes les attaques
        if (isTrap(toRow, toCol)) {
            boolean isDefenderInEnemyTrap = (defender.isPlayer1() && toRow <= 1) || // J1 dans pi√®ge J2
                    (!defender.isPlayer1() && toRow >= 7); // J2 dans pi√®ge J1

            if (isDefenderInEnemyTrap) {
                System.out.println("‚ö° Pi√®ce prise au pi√®ge - capture possible!");
                return true;
            }
        }

        // R√®gles normales de capture
        if (!attacker.canCapture(defender)) {
            System.out.println("‚ùå " + attacker.getName() + " ne peut pas capturer " + defender.getName() + "!");
            return false;
        }

        return true;
    }

    /**
     * V√©rifie les conditions de fin de jeu
     */
    private void checkGameEnd() {
        // V√©rifier si quelqu'un a atteint le sanctuaire ennemi
        Piece sanctuaryJ1 = board[SANCTUARY_PLAYER1[0]][SANCTUARY_PLAYER1[1]];
        Piece sanctuaryJ2 = board[SANCTUARY_PLAYER2[0]][SANCTUARY_PLAYER2[1]];

        if (sanctuaryJ1 != null && !sanctuaryJ1.isPlayer1()) {
            gameOver = true;
            gameResult = "Victoire Joueur 2 - Sanctuaire atteint!";
            return;
        }

        if (sanctuaryJ2 != null && sanctuaryJ2.isPlayer1()) {
            gameOver = true;
            gameResult = "Victoire Joueur 1 - Sanctuaire atteint!";
            return;
        }

        // V√©rifier s'il reste des pi√®ces pour chaque joueur
        boolean hasPlayer1Pieces = false;
        boolean hasPlayer2Pieces = false;

        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                if (board[i][j] != null) {
                    if (board[i][j].isPlayer1()) {
                        hasPlayer1Pieces = true;
                    } else {
                        hasPlayer2Pieces = true;
                    }
                }
            }
        }

        if (!hasPlayer1Pieces) {
            gameOver = true;
            gameResult = "Victoire Joueur 2 - Plus de pi√®ces pour Joueur 1!";
        } else if (!hasPlayer2Pieces) {
            gameOver = true;
            gameResult = "Victoire Joueur 1 - Plus de pi√®ces pour Joueur 2!";
        }
    }

    /**
     * Obtient le r√©sultat de la partie format√©
     */
    public String getGameResult(String player1Name, String player2Name) {
        if (!gameOver)
            return "Partie en cours";

        if (gameResult.contains("Victoire Joueur 1")) {
            return "Victoire " + player1Name;
        } else if (gameResult.contains("Victoire Joueur 2")) {
            return "Victoire " + player2Name;
        } else {
            return gameResult;
        }
    }

    // Getters
    public boolean isGameOver() {
        return gameOver;
    }

    public String getGameResult() {
        return gameResult;
    }

    public Piece[][] getBoard() {
        return board;
    }

    /**
     * S√©rialise l'√©tat du plateau pour sauvegarde
     */
    public String serializeBoardState() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                if (board[i][j] != null) {
                    Piece piece = board[i][j];
                    sb.append(i).append(",").append(j).append(",")
                            .append(piece.getType()).append(",")
                            .append(piece.isPlayer1() ? "1" : "0").append(";");
                }
            }
        }
        return sb.toString();
    }

    /**
     * Restaure l'√©tat du plateau depuis une sauvegarde
     */
    public void deserializeBoardState(String boardState) {
        // Nettoyer le plateau
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                board[i][j] = null;
            }
        }

        if (boardState == null || boardState.trim().isEmpty()) {
            return;
        }

        // Restaurer les pi√®ces
        String[] pieces = boardState.split(";");
        for (String pieceData : pieces) {
            if (!pieceData.trim().isEmpty()) {
                String[] parts = pieceData.split(",");
                if (parts.length == 4) {
                    int row = Integer.parseInt(parts[0]);
                    int col = Integer.parseInt(parts[1]);
                    int type = Integer.parseInt(parts[2]);
                    boolean isPlayer1 = parts[3].equals("1");

                    if (isValidPosition(row, col)) {
                        board[row][col] = new Piece(type, isPlayer1);
                    }
                }
            }
        }
    }
}
